#!/usr/bin/env python
#


'''
Generate the two .c files for building the ICU data static library. Reads the data files
as specified in the command line arguments, to produce:

	*	a `table of contents` .c file
	*	a 'data' .c file
	
The contents of the input files are encoded into C style arrays (in the `data` .c file)

The index data structure is defined in the `table of contents` .c file


'''


import os
import sys


# Some global config values
SHORT_NAME = "icudt"
ENTRY_POINT_NAME = SHORT_NAME
SIZE_OF_UDataInfo = 20
U_CHARSET_FAMILY = 0
U_SIZEOF_UCHAR = 2
U_IS_BIG_ENDIAN = 0

def PKG_NAME():
	if U_IS_BIG_ENDIAN:
		return SHORT_NAME+"b"
	else:
		return SHORT_NAME+"l"



# [Usage]
#
#
#	generate_source.py source-dir source-file-list output-toc-file output-data-file [bigendian:y/n]
#



"""
	Return the (runtimeIdentifier,compiletimeIdentifier) used to refer to
	a particular file.
"""
def getFileIdentifiers(inFilename,prefix=""):
	#strip whitespace
	inFilename=inFilename.strip()
	# get rid of dots
	result=inFilename.replace(".","_")
	result=result.replace("-","_")	
	# get rid of "/" or "\" to flatten path
	result=result.replace("\\","_")
	result=result.replace("/","_")
	
	if prefix!="":
		return (prefix+"/"+inFilename,prefix+"_"+result)
	else:
		return (inFilename,result)
	

def generateTOC(srcFileList):
	
	def genHeader():
		return """
/*
 * ICU common data table of contents for icudtl.dat ,
 * Automatically generated by icu/data/gen_source/generate_source.py.
 */

#include "unicode/utypes.h"
#include "unicode/udata.h"
"""
		
	def genExternalSymbols(srcFileList):
		symbol_declarations = "/* external symbol declarations for data */\nextern const char"

		for f in srcFileList:
			symbol_declarations+="\n\t"+getFileIdentifiers(f,PKG_NAME())[1]+"[],"
		# replace last comma with semi-colon
		return symbol_declarations[:-1]+";"
			

	def genTocStruct(srcFileList):
		
		return """
U_EXPORT struct {
	uint16_t headerSize;
	uint8_t magic1, magic2;
	UDataInfo info;
	char padding[%u];
	uint32_t count, reserved;
	struct {
		const char *name;
		const void *data;
	} toc[%u];
} """ % (32-4-SIZE_OF_UDataInfo,len(srcFileList))

	def genTocContents(srcFileList):
		result = """U_EXPORT2 %s_dat = {
	32, 0xda, 0x27, {
		%u, 0,
		%u, %u, %u, 0,
		{0x54, 0x6f, 0x43, 0x50},
		{1, 0, 0, 0},
		{0, 0, 0, 0}
	},
	"", %lu, 0, { """ % (ENTRY_POINT_NAME,SIZE_OF_UDataInfo,U_IS_BIG_ENDIAN,U_CHARSET_FAMILY,U_SIZEOF_UCHAR,len(srcFileList))

		
		for f in srcFileList:
			result+="""\n\t\t{ "%s", %s },""" % getFileIdentifiers(f,PKG_NAME())
		# replace last comma with semi-colon
		return result[:-1]+"\n\t}\n};"	

		
	
	
	#for l in srcFileList:
	#	print l,getFileIdentifiers(l,"icudtl")
	return genHeader()+genExternalSymbols(srcFileList)+genTocStruct(srcFileList)+genTocContents(srcFileList)


def generateData(srcDir,srcFileList):

	def genHeader():
		return """#define U_DISABLE_RENAMING 1\n#include "unicode/umachine.h"\n"""

	"""Encode the contents of a file as a C byte array """
	def generateCByteArray(filePath,symbolName):
	
		"""Return a comma-delimited list of byte values for the contents of the specified file"""
		def getByteList(filePath):
			with open(filePath,"rb") as f:
				bytes = f.read()
				bytes_len = len(bytes)
			result=""
			i = 0
			for b in bytes:
				if i==0:
					result+="\n"
				i=(i+1)%16
				result+=str(ord(b))+","
			return (result[:-1],len(bytes))
			
		(fByteList,fLen) = getByteList(filePath)
		
		return ("U_CDECL_BEGIN"
				"\nconst struct {"
				"\n\tdouble bogus;"
				"\n\tuint8_t bytes[%d];" 
				"\n} %s={ 0.0, {%s"
				"\n}"
				"\n};"
				"\nU_CDECL_END\n") % (fLen,symbolName,fByteList)

	result = genHeader()
	
	for f in srcFileList:
		# resolve the actual file path
		filePath = os.path.join(srcDir,f.strip())
		# get symbol identifiers for use in the c code
		(_,symbolName) = getFileIdentifiers(f,PKG_NAME())
		print "processing `%s` ..." % f.strip()
		result+=generateCByteArray(filePath,symbolName)
		print "done."
		
	return result
	

def doGenerateSource(srcDir,srcFileList,dstTocFile,dstDataFile):
	with open(dstTocFile,"w") as f:
		f.write( generateTOC(srcFileList) )
	with open(dstDataFile,"w") as f:
		f.write( generateData(srcDir,srcFileList) )			
	
	

def run():
	if len(sys.argv)<5:
		print """
[Usage:]

	generate_source.py source-dir source-file-list output-toc-cfile output-data-cfile [isBigEndian? T/F]
		
		"""
		
	else:
		srcDir = sys.argv[1]
		srcFileListPath = sys.argv[2]
		dstTocFile = sys.argv[3]
		dstDataFile = sys.argv[4]
		if len(sys.argv)>5 and sys.argv[5][0] in ["y","Y","1","t","T"]:
			global U_IS_BIG_ENDIAN
			U_IS_BIG_ENDIAN = 1
		
		if not os.path.exists(srcDir):
			print "Source directory does not exist"
		elif not os.path.exists(srcFileListPath):
			print "Source file list file does not exist"
			
		else:
		
			# read the source file list file
			try:
				with open(srcFileListPath) as f:
   					srcFileList = f.readlines()
			except:
				print "Error reading source file list"
				raise "Cannot continue"
				
			doGenerateSource(srcDir,srcFileList,dstTocFile,dstDataFile)

			

				
										



if __name__ == '__main__':
    run()        
