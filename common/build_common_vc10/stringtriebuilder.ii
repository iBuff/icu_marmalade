# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp"
# 1 "C:\\Users\\will\\Documents\\UtterSpeech\\marmalade\\icu\\common\\build_common_vc10//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "C:/Users/will/Documents/UtterSpeech/marmalade/icu/common/build_common_vc10/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp"
# 15 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo" 1
# 21 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_prolog.h" 1
# 10 "c:/marmalade/5.2/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 1
# 62 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl_user_config.h" 1
# 63 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 2




# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config_compat.h" 1
# 68 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 2



# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_site_config.h" 1
# 72 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 2


# 1 "c:/marmalade/5.2/s3e/h/std/c++/config/stlcomp.h" 1
# 54 "c:/marmalade/5.2/s3e/h/std/c++/config/stlcomp.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/config/stl_gcc_s3e.h" 1
# 67 "c:/marmalade/5.2/s3e/h/std/c++/config/stl_gcc_s3e.h"
     typedef char __stl_char;
# 55 "c:/marmalade/5.2/s3e/h/std/c++/config/stlcomp.h" 2
# 75 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 2
# 83 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/config/stl_confix.h" 1
# 84 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h" 2
# 488 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h"
namespace std { }
namespace __std_alias = std;
# 546 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config.h"
namespace _STL { }

namespace stlport = _STL;
# 11 "c:/marmalade/5.2/s3e/h/std/c++/stl/_prolog.h" 2





# 1 "c:/marmalade/5.2/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/5.2/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo" 2





# 1 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo.h" 1
# 18 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/exception" 1
# 58 "c:/marmalade/5.2/s3e/h/std/c++/exception"
# 1 "c:/marmalade/5.2/s3e/h/ext/../std/c++/exception.h" 1
# 18 "c:/marmalade/5.2/s3e/h/ext/../std/c++/exception.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/exception_gcc" 1
# 44 "c:/marmalade/5.2/s3e/h/std/c++/exception_gcc"
extern "C++" {

namespace std
{
# 56 "c:/marmalade/5.2/s3e/h/std/c++/exception_gcc"
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 104 "c:/marmalade/5.2/s3e/h/std/c++/exception_gcc"
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 119 "c:/marmalade/5.2/s3e/h/std/c++/exception_gcc"
  void __verbose_terminate_handler ();
}

}
# 19 "c:/marmalade/5.2/s3e/h/ext/../std/c++/exception.h" 2
# 59 "c:/marmalade/5.2/s3e/h/std/c++/exception" 2
# 75 "c:/marmalade/5.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/5.2/s3e/h/std/c++/exception"
}
# 19 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo.h" 2
namespace std
{
 using _STL::exception;
}
# 1 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo_gcc" 1
# 39 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo_gcc"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/5.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/5.2/s3e/h/std/c++/exception"
}
# 40 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo_gcc" 2

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 85 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo_gcc"
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);

  protected:
    const char *__name;

  protected:
    explicit type_info(const char *__n): __name(__n) { }

  public:



    const char* name() const;
# 133 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo_gcc"
    bool before(const type_info& __arg) const
    { return __name < __arg.__name; }
    bool operator==(const type_info& __arg) const
    { return __name == __arg.__name; }

    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


  public:

    virtual bool __is_pointer_p() const;

    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;
  };






  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }


    virtual ~bad_cast() throw();

    virtual const char* what() const throw();
  };


  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }


    virtual ~bad_typeid() throw();

    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 24 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo.h" 2
# 28 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo" 2
# 43 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo"
namespace _STL {



using __std_alias::type_info;



using __std_alias::bad_typeid;
# 61 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo"
using __std_alias::bad_cast;


}
# 78 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/5.2/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/5.2/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/5.2/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/5.2/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/5.2/s3e/h/std/c++/stl/_epilog.h" 2
# 79 "c:/marmalade/5.2/s3e/h/std/c++/typeinfo" 2
# 16 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 1
# 36 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h" 1
# 61 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h" 1
# 23 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h"
# 1 "c:/marmalade/5.2/s3e/h/std/sys/types.h" 1
# 15 "c:/marmalade/5.2/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/5.2/s3e/h/s3eTypes.h" 1
# 37 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 51 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 74 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 96 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 108 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 226 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 244 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 256 "c:/marmalade/5.2/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/5.2/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/5.2/s3e/h/std/stddef.h" 1
# 16 "c:/marmalade/5.2/s3e/h/std/stddef.h"
typedef signed int ptrdiff_t;


    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 17 "c:/marmalade/5.2/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/5.2/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/5.2/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/5.2/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/5.2/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/5.2/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/5.2/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/5.2/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace _STL
{
    typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;

typedef int ssize_t;
typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 24 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h" 2

# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/platform.h" 1
# 26 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h" 2
# 51 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h"
# 1 "c:/marmalade/5.2/s3e/h/std/inttypes.h" 1
# 17 "c:/marmalade/5.2/s3e/h/std/inttypes.h"
typedef struct
{
    long int quot;
    long int rem;
} imaxdiv_t;


extern "C" {

imaxdiv_t imaxdiv(intmax_t numerator, intmax_t denominator);

}
# 52 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/ptypes.h" 2
# 62 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h" 2
# 231 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h"
typedef int8_t UBool;
# 322 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h"
    typedef wchar_t UChar;
# 349 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h"
typedef int32_t UChar32;
# 386 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/urename.h" 1
# 35 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/urename.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h" 1
# 36 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/urename.h" 2




# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uvernum.h" 1
# 41 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/urename.h" 2
# 387 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/umachine.h" 2
# 37 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h" 1
# 111 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 1
# 112 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h" 2
# 230 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h" 1
# 58 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h"
extern "C" const uint8_t



utf8_countTrailBytes_48[256];
# 91 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h"
extern "C" UChar32
utf8_nextCharSafeBody_48(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict);
# 103 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h"
extern "C" int32_t
utf8_appendCharSafeBody_48(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError);
# 115 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h"
extern "C" UChar32
utf8_prevCharSafeBody_48(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict);
# 127 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf8.h"
extern "C" int32_t
utf8_back1SafeBody_48(const uint8_t *s, int32_t start, int32_t i);
# 231 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf16.h" 1
# 232 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h" 2


# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf_old.h" 1
# 235 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utf.h" 2
# 38 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h" 1
# 57 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
typedef uint8_t UVersionInfo[4];
# 109 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
        namespace icu_48 { }
        namespace icu = icu_48;
# 122 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
        using namespace icu_48;
# 152 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
extern "C" void
u_versionFromString_48(UVersionInfo versionArray, const char *versionString);
# 166 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
extern "C" void
u_versionFromUString_48(UVersionInfo versionArray, const UChar *versionString);
# 182 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
extern "C" void
u_versionToString_48(UVersionInfo versionArray, char *versionString);
# 193 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uversion.h"
extern "C" void
u_getVersion_48(UVersionInfo versionArray);
# 39 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uconfig.h" 1
# 40 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 2
# 1 "c:/marmalade/5.2/s3e/h/std/float.h" 1
# 31 "c:/marmalade/5.2/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/5.2/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/5.2/s3e/h/std/float.h"
    }
# 41 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h" 2
# 314 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
typedef double UDate;
# 385 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
typedef void* UClassID;
# 639 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
typedef enum UErrorCode {





    U_USING_FALLBACK_WARNING = -128,

    U_ERROR_WARNING_START = -128,

    U_USING_DEFAULT_WARNING = -127,

    U_SAFECLONE_ALLOCATED_WARNING = -126,

    U_STATE_OLD_WARNING = -125,

    U_STRING_NOT_TERMINATED_WARNING = -124,

    U_SORT_KEY_TOO_SHORT_WARNING = -123,

    U_AMBIGUOUS_ALIAS_WARNING = -122,

    U_DIFFERENT_UCA_VERSION = -121,

    U_PLUGIN_CHANGED_LEVEL_WARNING = -120,

    U_ERROR_WARNING_LIMIT,


    U_ZERO_ERROR = 0,

    U_ILLEGAL_ARGUMENT_ERROR = 1,
    U_MISSING_RESOURCE_ERROR = 2,
    U_INVALID_FORMAT_ERROR = 3,
    U_FILE_ACCESS_ERROR = 4,
    U_INTERNAL_PROGRAM_ERROR = 5,
    U_MESSAGE_PARSE_ERROR = 6,
    U_MEMORY_ALLOCATION_ERROR = 7,
    U_INDEX_OUTOFBOUNDS_ERROR = 8,
    U_PARSE_ERROR = 9,
    U_INVALID_CHAR_FOUND = 10,
    U_TRUNCATED_CHAR_FOUND = 11,
    U_ILLEGAL_CHAR_FOUND = 12,
    U_INVALID_TABLE_FORMAT = 13,
    U_INVALID_TABLE_FILE = 14,
    U_BUFFER_OVERFLOW_ERROR = 15,
    U_UNSUPPORTED_ERROR = 16,
    U_RESOURCE_TYPE_MISMATCH = 17,
    U_ILLEGAL_ESCAPE_SEQUENCE = 18,
    U_UNSUPPORTED_ESCAPE_SEQUENCE = 19,
    U_NO_SPACE_AVAILABLE = 20,
    U_CE_NOT_FOUND_ERROR = 21,
    U_PRIMARY_TOO_LONG_ERROR = 22,
    U_STATE_TOO_OLD_ERROR = 23,
    U_TOO_MANY_ALIASES_ERROR = 24,

    U_ENUM_OUT_OF_SYNC_ERROR = 25,
    U_INVARIANT_CONVERSION_ERROR = 26,
    U_INVALID_STATE_ERROR = 27,
    U_COLLATOR_VERSION_MISMATCH = 28,
    U_USELESS_COLLATOR_ERROR = 29,
    U_NO_WRITE_PERMISSION = 30,

    U_STANDARD_ERROR_LIMIT,



    U_BAD_VARIABLE_DEFINITION=0x10000,
    U_PARSE_ERROR_START = 0x10000,
    U_MALFORMED_RULE,
    U_MALFORMED_SET,
    U_MALFORMED_SYMBOL_REFERENCE,
    U_MALFORMED_UNICODE_ESCAPE,
    U_MALFORMED_VARIABLE_DEFINITION,
    U_MALFORMED_VARIABLE_REFERENCE,
    U_MISMATCHED_SEGMENT_DELIMITERS,
    U_MISPLACED_ANCHOR_START,
    U_MISPLACED_CURSOR_OFFSET,
    U_MISPLACED_QUANTIFIER,
    U_MISSING_OPERATOR,
    U_MISSING_SEGMENT_CLOSE,
    U_MULTIPLE_ANTE_CONTEXTS,
    U_MULTIPLE_CURSORS,
    U_MULTIPLE_POST_CONTEXTS,
    U_TRAILING_BACKSLASH,
    U_UNDEFINED_SEGMENT_REFERENCE,
    U_UNDEFINED_VARIABLE,
    U_UNQUOTED_SPECIAL,
    U_UNTERMINATED_QUOTE,
    U_RULE_MASK_ERROR,
    U_MISPLACED_COMPOUND_FILTER,
    U_MULTIPLE_COMPOUND_FILTERS,
    U_INVALID_RBT_SYNTAX,
    U_INVALID_PROPERTY_PATTERN,
    U_MALFORMED_PRAGMA,
    U_UNCLOSED_SEGMENT,
    U_ILLEGAL_CHAR_IN_SEGMENT,
    U_VARIABLE_RANGE_EXHAUSTED,
    U_VARIABLE_RANGE_OVERLAP,
    U_ILLEGAL_CHARACTER,
    U_INTERNAL_TRANSLITERATOR_ERROR,
    U_INVALID_ID,
    U_INVALID_FUNCTION,
    U_PARSE_ERROR_LIMIT,




    U_UNEXPECTED_TOKEN=0x10100,
    U_FMT_PARSE_ERROR_START=0x10100,
    U_MULTIPLE_DECIMAL_SEPARATORS,
    U_MULTIPLE_DECIMAL_SEPERATORS = U_MULTIPLE_DECIMAL_SEPARATORS,
    U_MULTIPLE_EXPONENTIAL_SYMBOLS,
    U_MALFORMED_EXPONENTIAL_PATTERN,
    U_MULTIPLE_PERCENT_SYMBOLS,
    U_MULTIPLE_PERMILL_SYMBOLS,
    U_MULTIPLE_PAD_SPECIFIERS,
    U_PATTERN_SYNTAX_ERROR,
    U_ILLEGAL_PAD_POSITION,
    U_UNMATCHED_BRACES,
    U_UNSUPPORTED_PROPERTY,
    U_UNSUPPORTED_ATTRIBUTE,
    U_ARGUMENT_TYPE_MISMATCH,
    U_DUPLICATE_KEYWORD,
    U_UNDEFINED_KEYWORD,
    U_DEFAULT_KEYWORD_MISSING,
    U_DECIMAL_NUMBER_SYNTAX_ERROR,
    U_FORMAT_INEXACT_ERROR,
    U_FMT_PARSE_ERROR_LIMIT,




    U_BRK_INTERNAL_ERROR=0x10200,
    U_BRK_ERROR_START=0x10200,
    U_BRK_HEX_DIGITS_EXPECTED,
    U_BRK_SEMICOLON_EXPECTED,
    U_BRK_RULE_SYNTAX,
    U_BRK_UNCLOSED_SET,
    U_BRK_ASSIGN_ERROR,
    U_BRK_VARIABLE_REDFINITION,
    U_BRK_MISMATCHED_PAREN,
    U_BRK_NEW_LINE_IN_QUOTED_STRING,
    U_BRK_UNDEFINED_VARIABLE,
    U_BRK_INIT_ERROR,
    U_BRK_RULE_EMPTY_SET,
    U_BRK_UNRECOGNIZED_OPTION,
    U_BRK_MALFORMED_RULE_TAG,
    U_BRK_ERROR_LIMIT,




    U_REGEX_INTERNAL_ERROR=0x10300,
    U_REGEX_ERROR_START=0x10300,
    U_REGEX_RULE_SYNTAX,
    U_REGEX_INVALID_STATE,
    U_REGEX_BAD_ESCAPE_SEQUENCE,
    U_REGEX_PROPERTY_SYNTAX,
    U_REGEX_UNIMPLEMENTED,
    U_REGEX_MISMATCHED_PAREN,
    U_REGEX_NUMBER_TOO_BIG,
    U_REGEX_BAD_INTERVAL,
    U_REGEX_MAX_LT_MIN,
    U_REGEX_INVALID_BACK_REF,
    U_REGEX_INVALID_FLAG,
    U_REGEX_LOOK_BEHIND_LIMIT,
    U_REGEX_SET_CONTAINS_STRING,
    U_REGEX_OCTAL_TOO_BIG,
    U_REGEX_MISSING_CLOSE_BRACKET,
    U_REGEX_INVALID_RANGE,
    U_REGEX_STACK_OVERFLOW,
    U_REGEX_TIME_OUT,
    U_REGEX_STOPPED_BY_CALLER,
    U_REGEX_ERROR_LIMIT,




    U_IDNA_PROHIBITED_ERROR=0x10400,
    U_IDNA_ERROR_START=0x10400,
    U_IDNA_UNASSIGNED_ERROR,
    U_IDNA_CHECK_BIDI_ERROR,
    U_IDNA_STD3_ASCII_RULES_ERROR,
    U_IDNA_ACE_PREFIX_ERROR,
    U_IDNA_VERIFICATION_ERROR,
    U_IDNA_LABEL_TOO_LONG_ERROR,
    U_IDNA_ZERO_LENGTH_LABEL_ERROR,
    U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR,
    U_IDNA_ERROR_LIMIT,



    U_STRINGPREP_PROHIBITED_ERROR = U_IDNA_PROHIBITED_ERROR,
    U_STRINGPREP_UNASSIGNED_ERROR = U_IDNA_UNASSIGNED_ERROR,
    U_STRINGPREP_CHECK_BIDI_ERROR = U_IDNA_CHECK_BIDI_ERROR,




    U_PLUGIN_ERROR_START=0x10500,
    U_PLUGIN_TOO_HIGH=0x10500,
    U_PLUGIN_DIDNT_SET_LEVEL,
    U_PLUGIN_ERROR_LIMIT,

    U_ERROR_LIMIT=U_PLUGIN_ERROR_LIMIT
} UErrorCode;
# 855 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
    static
    inline UBool U_SUCCESS(UErrorCode code) { return (UBool)(code<=U_ZERO_ERROR); }




    static
    inline UBool U_FAILURE(UErrorCode code) { return (UBool)(code>U_ZERO_ERROR); }
# 882 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/utypes.h"
extern "C" const char *
u_errorName_48(UErrorCode code);
# 17 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h" 1
# 19 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h" 1
# 22 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
extern "C++" { namespace icu_48 {
# 101 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
class UMemory {
public:
# 120 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
    static void * operator new(size_t size) throw();






    static void * operator new[](size_t size) throw();
# 137 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
    static void operator delete(void *p) throw();






    static void operator delete[](void *p) throw();







    static inline void * operator new(size_t, void *ptr) throw() { return ptr; }






    static inline void operator delete(void *, void *) throw() {}
# 191 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
};
# 215 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
class UObject : public UMemory {
public:





    virtual ~UObject();






    virtual UClassID getDynamicClassID() const = 0;

protected:
# 288 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
};
# 350 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/uobject.h"
} }
# 20 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h" 2


struct UHashtable;
typedef struct UHashtable UHashtable;





enum UStringTrieBuildOption {




    USTRINGTRIE_BUILD_FAST,
# 45 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
    USTRINGTRIE_BUILD_SMALL
};

extern "C++" { namespace icu_48 {







class StringTrieBuilder : public UObject {
public:

    static UBool hashNode(const void *node);

    static UBool equalNodes(const void *left, const void *right);

protected:

    StringTrieBuilder();

    virtual ~StringTrieBuilder();


    void createCompactBuilder(int32_t sizeGuess, UErrorCode &errorCode);

    void deleteCompactBuilder();


    void build(UStringTrieBuildOption buildOption, int32_t elementsLength, UErrorCode &errorCode);


    int32_t writeNode(int32_t start, int32_t limit, int32_t unitIndex);

    int32_t writeBranchSubNode(int32_t start, int32_t limit, int32_t unitIndex, int32_t length);

    class Node;


    Node *makeNode(int32_t start, int32_t limit, int32_t unitIndex, UErrorCode &errorCode);

    Node *makeBranchSubNode(int32_t start, int32_t limit, int32_t unitIndex,
                            int32_t length, UErrorCode &errorCode);


    virtual int32_t getElementStringLength(int32_t i) const = 0;

    virtual UChar getElementUnit(int32_t i, int32_t unitIndex) const = 0;

    virtual int32_t getElementValue(int32_t i) const = 0;




    virtual int32_t getLimitOfLinearMatch(int32_t first, int32_t last, int32_t unitIndex) const = 0;



    virtual int32_t countElementUnits(int32_t start, int32_t limit, int32_t unitIndex) const = 0;

    virtual int32_t skipElementsBySomeUnits(int32_t i, int32_t unitIndex, int32_t count) const = 0;

    virtual int32_t indexOfElementWithNextUnit(int32_t i, int32_t unitIndex, UChar unit) const = 0;


    virtual UBool matchNodesCanHaveValues() const = 0;


    virtual int32_t getMaxBranchLinearSubNodeLength() const = 0;

    virtual int32_t getMinLinearMatch() const = 0;

    virtual int32_t getMaxLinearMatchLength() const = 0;



    static const int32_t kMaxBranchLinearSubNodeLength=5;




    static const int32_t kMaxSplitBranchLevels=14;
# 139 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
    Node *registerNode(Node *newNode, UErrorCode &errorCode);
# 150 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
    Node *registerFinalValue(int32_t value, UErrorCode &errorCode);
# 170 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
    UHashtable *nodes;


    class Node : public UObject {
    public:
        Node(int32_t initialHash) : hash(initialHash), offset(0) {}
        inline int32_t hashCode() const { return hash; }

        static inline int32_t hashCode(const Node *node) { return node==__null ? 0 : node->hashCode(); }

        virtual UBool operator==(const Node &other) const;
        inline UBool operator!=(const Node &other) const { return !operator==(other); }
# 209 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);

        virtual void write(StringTrieBuilder &builder) = 0;

        inline void writeUnlessInsideRightEdge(int32_t firstRight, int32_t lastRight,
                                               StringTrieBuilder &builder) {





            if(offset<0 && (offset<lastRight || firstRight<offset)) {
                write(builder);
            }
        }
        inline int32_t getOffset() const { return offset; }
    protected:
        int32_t hash;
        int32_t offset;
    private:

        virtual UClassID getDynamicClassID() const;
    };
# 240 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/unicode/stringtriebuilder.h"
    class FinalValueNode : public Node {
    public:
        FinalValueNode(int32_t v) : Node(0x111111*37+v), value(v) {}
        virtual UBool operator==(const Node &other) const;
        virtual void write(StringTrieBuilder &builder);
    protected:
        int32_t value;
    };


    class ValueNode : public Node {
    public:
        ValueNode(int32_t initialHash) : Node(initialHash), hasValue(0), value(0) {}
        virtual UBool operator==(const Node &other) const;
        void setValue(int32_t v) {
            hasValue=1;
            value=v;
            hash=hash*37+v;
        }
    protected:
        UBool hasValue;
        int32_t value;
    };


    class IntermediateValueNode : public ValueNode {
    public:
        IntermediateValueNode(int32_t v, Node *nextNode)
                : ValueNode(0x222222*37+hashCode(nextNode)), next(nextNode) { setValue(v); }
        virtual UBool operator==(const Node &other) const;
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);
        virtual void write(StringTrieBuilder &builder);
    protected:
        Node *next;
    };


    class LinearMatchNode : public ValueNode {
    public:
        LinearMatchNode(int32_t len, Node *nextNode)
                : ValueNode((0x333333*37+len)*37+hashCode(nextNode)),
                  length(len), next(nextNode) {}
        virtual UBool operator==(const Node &other) const;
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);
    protected:
        int32_t length;
        Node *next;
    };


    class BranchNode : public Node {
    public:
        BranchNode(int32_t initialHash) : Node(initialHash) {}
    protected:
        int32_t firstEdgeNumber;
    };


    class ListBranchNode : public BranchNode {
    public:
        ListBranchNode() : BranchNode(0x444444), length(0) {}
        virtual UBool operator==(const Node &other) const;
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);
        virtual void write(StringTrieBuilder &builder);

        void add(int32_t c, int32_t value) {
            units[length]=(UChar)c;
            equal[length]=__null;
            values[length]=value;
            ++length;
            hash=(hash*37+c)*37+value;
        }

        void add(int32_t c, Node *node) {
            units[length]=(UChar)c;
            equal[length]=node;
            values[length]=0;
            ++length;
            hash=(hash*37+c)*37+hashCode(node);
        }
    protected:
        Node *equal[kMaxBranchLinearSubNodeLength];
        int32_t length;
        int32_t values[kMaxBranchLinearSubNodeLength];
        UChar units[kMaxBranchLinearSubNodeLength];
    };


    class SplitBranchNode : public BranchNode {
    public:
        SplitBranchNode(UChar middleUnit, Node *lessThanNode, Node *greaterOrEqualNode)
                : BranchNode(((0x555555*37+middleUnit)*37+
                              hashCode(lessThanNode))*37+hashCode(greaterOrEqualNode)),
                  unit(middleUnit), lessThan(lessThanNode), greaterOrEqual(greaterOrEqualNode) {}
        virtual UBool operator==(const Node &other) const;
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);
        virtual void write(StringTrieBuilder &builder);
    protected:
        UChar unit;
        Node *lessThan;
        Node *greaterOrEqual;
    };



    class BranchHeadNode : public ValueNode {
    public:
        BranchHeadNode(int32_t len, Node *subNode)
                : ValueNode((0x666666*37+len)*37+hashCode(subNode)),
                  length(len), next(subNode) {}
        virtual UBool operator==(const Node &other) const;
        virtual int32_t markRightEdgesFirst(int32_t edgeNumber);
        virtual void write(StringTrieBuilder &builder);
    protected:
        int32_t length;
        Node *next;
    };


    virtual Node *createLinearMatchNode(int32_t i, int32_t unitIndex, int32_t length,
                                        Node *nextNode) const = 0;


    virtual int32_t write(int32_t unit) = 0;

    virtual int32_t writeElementUnits(int32_t i, int32_t unitIndex, int32_t length) = 0;

    virtual int32_t writeValueAndFinal(int32_t i, UBool isFinal) = 0;

    virtual int32_t writeValueAndType(UBool hasValue, int32_t value, int32_t node) = 0;

    virtual int32_t writeDeltaTo(int32_t jumpTarget) = 0;

private:

    virtual UClassID getDynamicClassID() const;
};

} }
# 18 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uassert.h" 1
# 19 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp" 2
# 1 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h" 1
# 76 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" {
# 88 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
union UHashTok {
    void* pointer;
    int32_t integer;
};
typedef union UHashTok UHashTok;




struct UHashElement {

    int32_t hashcode;
    UHashTok value;
    UHashTok key;
};
typedef struct UHashElement UHashElement;






typedef int32_t UHashFunction(const UHashTok key);







typedef UBool UKeyComparator(const UHashTok key1,
                                        const UHashTok key2);






typedef UBool UValueComparator(const UHashTok val1,
                                          const UHashTok val2);







typedef void UObjectDeleter(void* obj);





enum UHashResizePolicy {
    U_GROW,
    U_GROW_AND_SHRINK,
    U_FIXED
};





struct UHashtable {



    UHashElement *elements;



    UHashFunction *keyHasher;

    UKeyComparator *keyComparator;

    UValueComparator *valueComparator;

    UObjectDeleter *keyDeleter;

    UObjectDeleter *valueDeleter;




    int32_t count;


    int32_t length;




    int32_t highWaterMark;
    int32_t lowWaterMark;
    float highWaterRatio;
    float lowWaterRatio;

    int8_t primeIndex;

    UBool allocated;
};
typedef struct UHashtable UHashtable;

}
# 207 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UHashtable*
uhash_open_48(UHashFunction *keyHash,
           UKeyComparator *keyComp,
           UValueComparator *valueComp,
           UErrorCode *status);
# 224 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UHashtable*
uhash_openSize_48(UHashFunction *keyHash,
               UKeyComparator *keyComp,
               UValueComparator *valueComp,
               int32_t size,
               UErrorCode *status);
# 241 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UHashtable*
uhash_init_48(UHashtable *hash,
           UHashFunction *keyHash,
           UKeyComparator *keyComp,
           UValueComparator *valueComp,
           UErrorCode *status);





extern "C" void
uhash_close_48(UHashtable *hash);
# 263 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UHashFunction *
uhash_setKeyHasher_48(UHashtable *hash, UHashFunction *fn);
# 273 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UKeyComparator *
uhash_setKeyComparator_48(UHashtable *hash, UKeyComparator *fn);
# 283 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UValueComparator *
uhash_setValueComparator_48(UHashtable *hash, UValueComparator *fn);
# 296 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UObjectDeleter *
uhash_setKeyDeleter_48(UHashtable *hash, UObjectDeleter *fn);
# 309 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UObjectDeleter *
uhash_setValueDeleter_48(UHashtable *hash, UObjectDeleter *fn);
# 319 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void
uhash_setResizePolicy_48(UHashtable *hash, enum UHashResizePolicy policy);






extern "C" int32_t
uhash_count_48(const UHashtable *hash);
# 343 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void*
uhash_put_48(UHashtable *hash,
          void *key,
          void *value,
          UErrorCode *status);
# 361 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void*
uhash_iput_48(UHashtable *hash,
           int32_t key,
           void* value,
           UErrorCode *status);
# 379 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_puti_48(UHashtable *hash,
           void* key,
           int32_t value,
           UErrorCode *status);
# 397 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_iputi_48(UHashtable *hash,
           int32_t key,
           int32_t value,
           UErrorCode *status);
# 410 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void*
uhash_get_48(const UHashtable *hash,
          const void *key);
# 421 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void*
uhash_iget_48(const UHashtable *hash,
           int32_t key);
# 432 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_geti_48(const UHashtable *hash,
           const void* key);







extern "C" int32_t
uhash_igeti_48(const UHashtable *hash,
           int32_t key);







extern "C" void*
uhash_remove_48(UHashtable *hash,
             const void *key);







extern "C" void*
uhash_iremove_48(UHashtable *hash,
              int32_t key);







extern "C" int32_t
uhash_removei_48(UHashtable *hash,
              const void* key);







extern "C" int32_t
uhash_iremovei_48(UHashtable *hash,
               int32_t key);





extern "C" void
uhash_removeAll_48(UHashtable *hash);
# 504 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" const UHashElement*
uhash_find_48(const UHashtable *hash, const void* key);
# 520 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" const UHashElement*
uhash_nextElement_48(const UHashtable *hash,
                  int32_t *pos);
# 535 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void*
uhash_removeElement_48(UHashtable *hash, const UHashElement* e);
# 569 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_hashUChars_48(const UHashTok key);
# 579 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_hashChars_48(const UHashTok key);


extern "C" int32_t
uhash_hashUCharsN_48(const UChar *key, int32_t length);

extern "C" int32_t
uhash_hashCharsN_48(const char *key, int32_t length);
# 596 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_hashIChars_48(const UHashTok key);
# 606 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UBool
uhash_compareUChars_48(const UHashTok key1, const UHashTok key2);
# 616 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UBool
uhash_compareChars_48(const UHashTok key1, const UHashTok key2);
# 626 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UBool
uhash_compareIChars_48(const UHashTok key1, const UHashTok key2);
# 638 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_hashUnicodeString_48(const UHashTok key);







extern "C" int32_t
uhash_hashCaselessUnicodeString_48(const UHashTok key);







extern "C" UBool
uhash_compareUnicodeString_48(const UHashTok key1, const UHashTok key2);
# 666 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" UBool
uhash_compareCaselessUnicodeString_48(const UHashTok key1, const UHashTok key2);





extern "C" void
uhash_deleteUnicodeString_48(void *obj);
# 685 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" int32_t
uhash_hashLong_48(const UHashTok key);







extern "C" UBool
uhash_compareLong_48(const UHashTok key1, const UHashTok key2);
# 705 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/uhash.h"
extern "C" void
uhash_deleteHashtable_48(void *obj);





extern "C" void
uhash_deleteUObject_48(void *obj);






extern "C" void
uhash_freeBlock_48(void *obj);







extern "C" UBool
uhash_equals_48(const UHashtable* hash1, const UHashtable* hash2);
# 20 "c:/users/will/documents/utterspeech/marmalade/icu/common/source/stringtriebuilder.cpp" 2

extern "C" {

static int32_t
hashStringTrieNode(const UHashTok key) {
    return icu_48:: StringTrieBuilder::hashNode(key.pointer);
}

static UBool
equalStringTrieNodes(const UHashTok key1, const UHashTok key2) {
    return icu_48:: StringTrieBuilder::equalNodes(key1.pointer, key2.pointer);
}

}

extern "C++" { namespace icu_48 {

StringTrieBuilder::StringTrieBuilder() : nodes(__null) {}

StringTrieBuilder::~StringTrieBuilder() {
    deleteCompactBuilder();
}

void
StringTrieBuilder::createCompactBuilder(int32_t sizeGuess, UErrorCode &errorCode) {
    if(U_FAILURE(errorCode)) {
        return;
    }
    nodes=uhash_openSize_48(hashStringTrieNode, equalStringTrieNodes, __null,
                         sizeGuess, &errorCode);
    if(U_SUCCESS(errorCode) && nodes==__null) {
        errorCode=U_MEMORY_ALLOCATION_ERROR;
    }
    if(U_SUCCESS(errorCode)) {
        uhash_setKeyDeleter_48(nodes, uhash_deleteUObject_48);
    }
}

void
StringTrieBuilder::deleteCompactBuilder() {
    uhash_close_48(nodes);
    nodes=__null;
}

void
StringTrieBuilder::build(UStringTrieBuildOption buildOption, int32_t elementsLength,
                       UErrorCode &errorCode) {
    if(buildOption==USTRINGTRIE_BUILD_FAST) {
        writeNode(0, elementsLength, 0);
    } else {
        createCompactBuilder(2*elementsLength, errorCode);
        Node *root=makeNode(0, elementsLength, 0, errorCode);
        if(U_SUCCESS(errorCode)) {
            root->markRightEdgesFirst(-1);
            root->write(*this);
        }
        deleteCompactBuilder();
    }
}




int32_t
StringTrieBuilder::writeNode(int32_t start, int32_t limit, int32_t unitIndex) {
    UBool hasValue=0;
    int32_t value=0;
    int32_t type;
    if(unitIndex==getElementStringLength(start)) {

        value=getElementValue(start++);
        if(start==limit) {
            return writeValueAndFinal(value, 1);
        }
        hasValue=1;
    }

    int32_t minUnit=getElementUnit(start, unitIndex);
    int32_t maxUnit=getElementUnit(limit-1, unitIndex);
    if(minUnit==maxUnit) {

        int32_t lastUnitIndex=getLimitOfLinearMatch(start, limit-1, unitIndex);
        writeNode(start, limit, lastUnitIndex);

        int32_t length=lastUnitIndex-unitIndex;
        int32_t maxLinearMatchLength=getMaxLinearMatchLength();
        while(length>maxLinearMatchLength) {
            lastUnitIndex-=maxLinearMatchLength;
            length-=maxLinearMatchLength;
            writeElementUnits(start, lastUnitIndex, maxLinearMatchLength);
            write(getMinLinearMatch()+maxLinearMatchLength-1);
        }
        writeElementUnits(start, unitIndex, length);
        type=getMinLinearMatch()+length-1;
    } else {

        int32_t length=countElementUnits(start, limit, unitIndex);

        writeBranchSubNode(start, limit, unitIndex, length);
        if(--length<getMinLinearMatch()) {
            type=length;
        } else {
            write(length);
            type=0;
        }
    }
    return writeValueAndType(hasValue, value, type);
}



int32_t
StringTrieBuilder::writeBranchSubNode(int32_t start, int32_t limit, int32_t unitIndex, int32_t length) {
    UChar middleUnits[kMaxSplitBranchLevels];
    int32_t lessThan[kMaxSplitBranchLevels];
    int32_t ltLength=0;
    while(length>getMaxBranchLinearSubNodeLength()) {


        int32_t i=skipElementsBySomeUnits(start, unitIndex, length/2);

        middleUnits[ltLength]=getElementUnit(i, unitIndex);
        lessThan[ltLength]=writeBranchSubNode(start, i, unitIndex, length/2);
        ++ltLength;

        start=i;
        length=length-length/2;
    }

    int32_t starts[kMaxBranchLinearSubNodeLength];
    UBool isFinal[kMaxBranchLinearSubNodeLength-1];
    int32_t unitNumber=0;
    do {
        int32_t i=starts[unitNumber]=start;
        UChar unit=getElementUnit(i++, unitIndex);
        i=indexOfElementWithNextUnit(i, unitIndex, unit);
        isFinal[unitNumber]= start==i-1 && unitIndex+1==getElementStringLength(start);
        start=i;
    } while(++unitNumber<length-1);

    starts[unitNumber]=start;





    int32_t jumpTargets[kMaxBranchLinearSubNodeLength-1];
    do {
        --unitNumber;
        if(!isFinal[unitNumber]) {
            jumpTargets[unitNumber]=writeNode(starts[unitNumber], starts[unitNumber+1], unitIndex+1);
        }
    } while(unitNumber>0);


    unitNumber=length-1;
    writeNode(start, limit, unitIndex+1);
    int32_t offset=write(getElementUnit(start, unitIndex));

    while(--unitNumber>=0) {
        start=starts[unitNumber];
        int32_t value;
        if(isFinal[unitNumber]) {

            value=getElementValue(start);
        } else {

            value=offset-jumpTargets[unitNumber];
        }
        writeValueAndFinal(value, isFinal[unitNumber]);
        offset=write(getElementUnit(start, unitIndex));
    }

    while(ltLength>0) {
        --ltLength;
        writeDeltaTo(lessThan[ltLength]);
        offset=write(middleUnits[ltLength]);
    }
    return offset;
}




StringTrieBuilder::Node *
StringTrieBuilder::makeNode(int32_t start, int32_t limit, int32_t unitIndex, UErrorCode &errorCode) {
    if(U_FAILURE(errorCode)) {
        return __null;
    }
    UBool hasValue=0;
    int32_t value=0;
    if(unitIndex==getElementStringLength(start)) {

        value=getElementValue(start++);
        if(start==limit) {
            return registerFinalValue(value, errorCode);
        }
        hasValue=1;
    }
    Node *node;

    int32_t minUnit=getElementUnit(start, unitIndex);
    int32_t maxUnit=getElementUnit(limit-1, unitIndex);
    if(minUnit==maxUnit) {

        int32_t lastUnitIndex=getLimitOfLinearMatch(start, limit-1, unitIndex);
        Node *nextNode=makeNode(start, limit, lastUnitIndex, errorCode);

        int32_t length=lastUnitIndex-unitIndex;
        int32_t maxLinearMatchLength=getMaxLinearMatchLength();
        while(length>maxLinearMatchLength) {
            lastUnitIndex-=maxLinearMatchLength;
            length-=maxLinearMatchLength;
            node=createLinearMatchNode(start, lastUnitIndex, maxLinearMatchLength, nextNode);
            nextNode=registerNode(node, errorCode);
        }
        node=createLinearMatchNode(start, unitIndex, length, nextNode);
    } else {

        int32_t length=countElementUnits(start, limit, unitIndex);

        Node *subNode=makeBranchSubNode(start, limit, unitIndex, length, errorCode);
        node=new BranchHeadNode(length, subNode);
    }
    if(hasValue && node!=__null) {
        if(matchNodesCanHaveValues()) {
            ((ValueNode *)node)->setValue(value);
        } else {
            node=new IntermediateValueNode(value, registerNode(node, errorCode));
        }
    }
    return registerNode(node, errorCode);
}



StringTrieBuilder::Node *
StringTrieBuilder::makeBranchSubNode(int32_t start, int32_t limit, int32_t unitIndex,
                                   int32_t length, UErrorCode &errorCode) {
    if(U_FAILURE(errorCode)) {
        return __null;
    }
    UChar middleUnits[kMaxSplitBranchLevels];
    Node *lessThan[kMaxSplitBranchLevels];
    int32_t ltLength=0;
    while(length>getMaxBranchLinearSubNodeLength()) {


        int32_t i=skipElementsBySomeUnits(start, unitIndex, length/2);

        middleUnits[ltLength]=getElementUnit(i, unitIndex);
        lessThan[ltLength]=makeBranchSubNode(start, i, unitIndex, length/2, errorCode);
        ++ltLength;

        start=i;
        length=length-length/2;
    }
    if(U_FAILURE(errorCode)) {
        return __null;
    }
    ListBranchNode *listNode=new ListBranchNode();
    if(listNode==__null) {
        errorCode=U_MEMORY_ALLOCATION_ERROR;
        return __null;
    }

    int32_t unitNumber=0;
    do {
        int32_t i=start;
        UChar unit=getElementUnit(i++, unitIndex);
        i=indexOfElementWithNextUnit(i, unitIndex, unit);
        if(start==i-1 && unitIndex+1==getElementStringLength(start)) {
            listNode->add(unit, getElementValue(start));
        } else {
            listNode->add(unit, makeNode(start, i, unitIndex+1, errorCode));
        }
        start=i;
    } while(++unitNumber<length-1);

    UChar unit=getElementUnit(start, unitIndex);
    if(start==limit-1 && unitIndex+1==getElementStringLength(start)) {
        listNode->add(unit, getElementValue(start));
    } else {
        listNode->add(unit, makeNode(start, limit, unitIndex+1, errorCode));
    }
    Node *node=registerNode(listNode, errorCode);

    while(ltLength>0) {
        --ltLength;
        node=registerNode(
            new SplitBranchNode(middleUnits[ltLength], lessThan[ltLength], node), errorCode);
    }
    return node;
}

StringTrieBuilder::Node *
StringTrieBuilder::registerNode(Node *newNode, UErrorCode &errorCode) {
    if(U_FAILURE(errorCode)) {
        delete newNode;
        return __null;
    }
    if(newNode==__null) {
        errorCode=U_MEMORY_ALLOCATION_ERROR;
        return __null;
    }
    const UHashElement *old=uhash_find_48(nodes, newNode);
    if(old!=__null) {
        delete newNode;
        return (Node *)old->key.pointer;
    }





    uhash_puti_48(nodes, newNode, 1, &errorCode);
    ;
    if(U_FAILURE(errorCode)) {
        delete newNode;
        return __null;
    }
    return newNode;
}

StringTrieBuilder::Node *
StringTrieBuilder::registerFinalValue(int32_t value, UErrorCode &errorCode) {
    if(U_FAILURE(errorCode)) {
        return __null;
    }
    FinalValueNode key(value);
    const UHashElement *old=uhash_find_48(nodes, &key);
    if(old!=__null) {
        return (Node *)old->key.pointer;
    }
    Node *newNode=new FinalValueNode(value);
    if(newNode==__null) {
        errorCode=U_MEMORY_ALLOCATION_ERROR;
        return __null;
    }





    uhash_puti_48(nodes, newNode, 1, &errorCode);
    ;
    if(U_FAILURE(errorCode)) {
        delete newNode;
        return __null;
    }
    return newNode;
}

UBool
StringTrieBuilder::hashNode(const void *node) {
    return ((const Node *)node)->hashCode();
}

UBool
StringTrieBuilder::equalNodes(const void *left, const void *right) {
    return *(const Node *)left==*(const Node *)right;
}

UClassID StringTrieBuilder::getDynamicClassID() const { return __null; }

UBool
StringTrieBuilder::Node::operator==(const Node &other) const {
    return this==&other || (typeid(*this)==typeid(other) && hash==other.hash);
}

int32_t
StringTrieBuilder::Node::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        offset=edgeNumber;
    }
    return edgeNumber;
}

UClassID StringTrieBuilder::Node::getDynamicClassID() const { return __null; }

UBool
StringTrieBuilder::FinalValueNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!Node::operator==(other)) {
        return 0;
    }
    const FinalValueNode &o=(const FinalValueNode &)other;
    return value==o.value;
}

void
StringTrieBuilder::FinalValueNode::write(StringTrieBuilder &builder) {
    offset=builder.writeValueAndFinal(value, 1);
}

UBool
StringTrieBuilder::ValueNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!Node::operator==(other)) {
        return 0;
    }
    const ValueNode &o=(const ValueNode &)other;
    return hasValue==o.hasValue && (!hasValue || value==o.value);
}

UBool
StringTrieBuilder::IntermediateValueNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!ValueNode::operator==(other)) {
        return 0;
    }
    const IntermediateValueNode &o=(const IntermediateValueNode &)other;
    return next==o.next;
}

int32_t
StringTrieBuilder::IntermediateValueNode::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        offset=edgeNumber=next->markRightEdgesFirst(edgeNumber);
    }
    return edgeNumber;
}

void
StringTrieBuilder::IntermediateValueNode::write(StringTrieBuilder &builder) {
    next->write(builder);
    offset=builder.writeValueAndFinal(value, 0);
}

UBool
StringTrieBuilder::LinearMatchNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!ValueNode::operator==(other)) {
        return 0;
    }
    const LinearMatchNode &o=(const LinearMatchNode &)other;
    return length==o.length && next==o.next;
}

int32_t
StringTrieBuilder::LinearMatchNode::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        offset=edgeNumber=next->markRightEdgesFirst(edgeNumber);
    }
    return edgeNumber;
}

UBool
StringTrieBuilder::ListBranchNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!Node::operator==(other)) {
        return 0;
    }
    const ListBranchNode &o=(const ListBranchNode &)other;
    for(int32_t i=0; i<length; ++i) {
        if(units[i]!=o.units[i] || values[i]!=o.values[i] || equal[i]!=o.equal[i]) {
            return 0;
        }
    }
    return 1;
}

int32_t
StringTrieBuilder::ListBranchNode::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        firstEdgeNumber=edgeNumber;
        int32_t step=0;
        int32_t i=length;
        do {
            Node *edge=equal[--i];
            if(edge!=__null) {
                edgeNumber=edge->markRightEdgesFirst(edgeNumber-step);
            }

            step=1;
        } while(i>0);
        offset=edgeNumber;
    }
    return edgeNumber;
}

void
StringTrieBuilder::ListBranchNode::write(StringTrieBuilder &builder) {




    int32_t unitNumber=length-1;
    Node *rightEdge=equal[unitNumber];
    int32_t rightEdgeNumber= rightEdge==__null ? firstEdgeNumber : rightEdge->getOffset();
    do {
        --unitNumber;
        if(equal[unitNumber]!=__null) {
            equal[unitNumber]->writeUnlessInsideRightEdge(firstEdgeNumber, rightEdgeNumber, builder);
        }
    } while(unitNumber>0);


    unitNumber=length-1;
    if(rightEdge==__null) {
        builder.writeValueAndFinal(values[unitNumber], 1);
    } else {
        rightEdge->write(builder);
    }
    offset=builder.write(units[unitNumber]);

    while(--unitNumber>=0) {
        int32_t value;
        UBool isFinal;
        if(equal[unitNumber]==__null) {

            value=values[unitNumber];
            isFinal=1;
        } else {

            ;
            value=offset-equal[unitNumber]->getOffset();
            isFinal=0;
        }
        builder.writeValueAndFinal(value, isFinal);
        offset=builder.write(units[unitNumber]);
    }
}

UBool
StringTrieBuilder::SplitBranchNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!Node::operator==(other)) {
        return 0;
    }
    const SplitBranchNode &o=(const SplitBranchNode &)other;
    return unit==o.unit && lessThan==o.lessThan && greaterOrEqual==o.greaterOrEqual;
}

int32_t
StringTrieBuilder::SplitBranchNode::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        firstEdgeNumber=edgeNumber;
        edgeNumber=greaterOrEqual->markRightEdgesFirst(edgeNumber);
        offset=edgeNumber=lessThan->markRightEdgesFirst(edgeNumber-1);
    }
    return edgeNumber;
}

void
StringTrieBuilder::SplitBranchNode::write(StringTrieBuilder &builder) {

    lessThan->writeUnlessInsideRightEdge(firstEdgeNumber, greaterOrEqual->getOffset(), builder);

    greaterOrEqual->write(builder);

    ;
    builder.writeDeltaTo(lessThan->getOffset());
    offset=builder.write(unit);
}

UBool
StringTrieBuilder::BranchHeadNode::operator==(const Node &other) const {
    if(this==&other) {
        return 1;
    }
    if(!ValueNode::operator==(other)) {
        return 0;
    }
    const BranchHeadNode &o=(const BranchHeadNode &)other;
    return length==o.length && next==o.next;
}

int32_t
StringTrieBuilder::BranchHeadNode::markRightEdgesFirst(int32_t edgeNumber) {
    if(offset==0) {
        offset=edgeNumber=next->markRightEdgesFirst(edgeNumber);
    }
    return edgeNumber;
}

void
StringTrieBuilder::BranchHeadNode::write(StringTrieBuilder &builder) {
    next->write(builder);
    if(length<=builder.getMinLinearMatch()) {
        offset=builder.writeValueAndType(hasValue, value, length-1);
    } else {
        builder.write(length-1);
        offset=builder.writeValueAndType(hasValue, value, 0);
    }
}

} }
